本项目需要使用jdk1.7及以上版本

==================================================================================================================

1.学习用springboot集成SSM框架，无xml配置，快速搭建，提高开发效率
2.添加WebReqLogAspect类，使用Aop记录web请求内容以及响应内容

==================================================================================================================

springboot内嵌了tomcat，所以运行不依赖外置web容器。
只需要给一个主启动类，定义一个main方法，SpringApplication.run(AppStarter.class, args);即可启动应用。
mvn打包后为jar包，启动通过java -jar XXXX.jar启动web应用，即可正常访问。

==================================================================================================================

springboot集成定时任务步骤：
1.创建定时任务类，使用 @Scheduled(cron = "0/1 * * * * ?") 注解需要定时执行的方法，并指定cron表达式
2.主启动类AppStarter，添加注解 @EnableScheduling //增加支持定时任务注解

==================================================================================================================

springboot访问静态资源：
1.在src/main/resources下新建目录，目录名必须为指定名称，比如static，public，resources等
2.访问里面的资源url路径不需要添加上面的路径。

==================================================================================================================

全局异常拦截器GlobalExceptionHandler注意事项：
1. @ControllerAdvice //定义异常拦截切面
   注解异常处理类
2. @ResponseBody //表示拦截所有返回结果是json类型的返回
   @ExceptionHandler(RuntimeException.class)//表示拦截运行时异常
   注解异常处理方法。
3.处理方法的返回值可以map，可以为页面ModelAndView等。

==================================================================================================================

springboot集成jsp注意事项（因为打包方式不同，这个demo没有演示）：
1.maven项目打包方式为war（其他一般都为jar方式）
2.pom必须引入两个依赖，spring-boot-starter-tomcat以及tomcat-embed-jasper
3.如果使用的是springMVC的话，需要在application.properties添加配置如下：
  spring.mvc.view.prefix=/WEB-INF/jsp/
  spring.mvc.view.suffix=.jsp
4.此时jsp已经可以渲染web视图了

==================================================================================================================

该项目orm使用的mybatis，集成spring-jdbc没有演示，注意事项如下：
1.application.properties添加数据源配置spring.datasource...
2.dao类将会被自动注入jdbcTemplate，即可利用jdbcTemplate完成crud操作。

==================================================================================================================

springboot集成事务管理步骤：
在service的业务方法上，添加 @Transactional 即可进行事务控制。
多数据源的事务管理，暂不做集成。

==================================================================================================================

使用 @Async 执行多线程
1.在需要异步执行的方法上添加注解 @Async
2.在主类上开启支持多线程注解 @EnableAsync

==================================================================================================================

获取系统自定义参数：
1.定义field，使用 @Value("${paramName}")即可

==================================================================================================================

多环境配置：
1.相同配置信息放在application.yaml中
2.不同的配置放在不同的配置文件中，这里比如application-dev.yaml、
  application-test.yaml、application-prod.yaml三个配置文件模拟三套环境，
  同样的参数SYSTEM.CURRENT.ENVIROMENT在不同环境的值不同的情况，
3.在主配置文件application.yaml中指定当前激活使用的环境配置文件，
  spring.profiles.active=dev(此种写法为application.properties写法，当前项目用的是yaml配置文件)
  
==================================================================================================================

springboot集成ehcache报错，错误信息如下：
No CacheResolver specified, and no bean of type CacheManager found. Register a CacheManager bean or remove the @EnableCaching annotation from your configuration.
暂时未解决，待解决。
问题已解决，添加了一个缓存配置类CacheConfiguration，并且缓存开启注解在这个类上。
但是还有部分问题遗留：
1.UserMapper类的注解@CachePut会将缓存更新为null,估计是因为mybatis的动态mapper实现类在update操作时无法返回user对象导致的问题。
2.注解@CacheEvict可以正常清空缓存，没问题
3.缓存注解@CachePut(value = DEMO_CACHE_NAME,key = "'userCache_'+#user.getId()") 里面的#user.getId(),user为null,导致启动报错
@Cacheable(value=DEMO_CACHE_NAME,key="'userCache_'+#id")里面的#id,id为null，这个虽然启动不报错，但是缓存的key为null，也有问题

上面的问题解决如下：
1.未解决，但是可以肯定是方法返回值的问题导致，因为我验证分别将返回值修改为void和int后，结果果然是将null或者1更新到缓存里。
  但是mybatis目前只能识别返回值为int或者void，不能为user，否则会报错，提示不能识别返回类型。
3.#参数名方式改为#pIndex方式，这是一个坑，注意。
